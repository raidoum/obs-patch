diff --git a/libobs/audio-monitoring/osx/coreaudio-output.c b/libobs/audio-monitoring/osx/coreaudio-output.c
index 1a1afa79c..d6ff876e7 100644
--- a/libobs/audio-monitoring/osx/coreaudio-output.c
+++ b/libobs/audio-monitoring/osx/coreaudio-output.c
@@ -12,6 +12,12 @@
 
 #include "mac-helpers.h"
 
+#define DUMP_AUDIO_SIZE	(4096 * 10000)
+uint8_t dump_audio_data_resamp[DUMP_AUDIO_SIZE];
+//uint8_t dump_audio_data_original[DUMP_AUDIO_SIZE];
+uint32_t copy_pos_resamp = 0;
+//uint32_t copy_pos_original = 0;
+
 struct audio_monitor {
 	obs_source_t *source;
 	AudioQueueRef queue;
@@ -81,6 +87,10 @@ static void on_audio_playback(void *param, obs_source_t *source,
 	if (!success) {
 		return;
 	}
+	
+	// DEBGU用
+	//memcpy(dump_audio_data_original + copy_pos_original, audio_data->data, 4096);
+	//copy_pos_original = (copy_pos_original + 4096) % DUMP_AUDIO_SIZE;
 
 	bytes = sizeof(float) * monitor->channels * resample_frames;
 
@@ -98,6 +108,11 @@ static void on_audio_playback(void *param, obs_source_t *source,
 		}
 	}
 
+	// DEBGU用
+	//memcpy(dump_audio_data_resamp + copy_pos_resamp, resample_data[0], bytes);
+	//copy_pos_resamp = (copy_pos_resamp + bytes) % DUMP_AUDIO_SIZE;
+	//printf("copy_ad_pos: %d", copy_pos);
+
 	pthread_mutex_lock(&monitor->mutex);
 	circlebuf_push_back(&monitor->new_data, resample_data[0], bytes);
 
diff --git a/libobs/obs-source.c b/libobs/obs-source.c
index 3fe724bf8..a9553779a 100644
--- a/libobs/obs-source.c
+++ b/libobs/obs-source.c
@@ -33,6 +33,11 @@
 
 #define get_weak(source) ((obs_weak_source_t *)source->context.control)
 
+// DEBUG用途
+#define DUMP_AUDIO_SIZE	(4096 * 10000)
+uint8_t dump_audio_data_cpyad[DUMP_AUDIO_SIZE];
+uint32_t data_copy_pos = 0;
+
 static bool filter_compatible(obs_source_t *source, obs_source_t *filter);
 
 static inline bool data_valid(const struct obs_source *source, const char *f)
@@ -3873,6 +3878,8 @@ static void copy_audio_data(obs_source_t *source, const uint8_t *const data[],
 		}
 
 		memcpy(source->audio_data.data[i], data[i], size);
+		//memcpy(dump_audio_data_cpyad + data_copy_pos, data[i], size);
+		//data_copy_pos = (data_copy_pos + size) % DUMP_AUDIO_SIZE;
 	}
 
 	if (resize)
diff --git a/plugins/mac-capture/mac-audio.c b/plugins/mac-capture/mac-audio.c
index e8a066162..f32b483d8 100644
--- a/plugins/mac-capture/mac-audio.c
+++ b/plugins/mac-capture/mac-audio.c
@@ -12,6 +12,8 @@
 
 #include "audio-device-enum.h"
 
+#include <sys/stat.h>
+
 #define PROPERTY_DEFAULT_DEVICE kAudioHardwarePropertyDefaultInputDevice
 #define PROPERTY_FORMATS kAudioStreamPropertyAvailablePhysicalFormats
 
@@ -32,6 +34,26 @@
 #define TEXT_DEVICE obs_module_text("CoreAudio.Device")
 #define TEXT_DEVICE_DEFAULT obs_module_text("CoreAudio.Device.Default")
 
+// DUMP用のディレクトリ作成用　
+#define MKDIR(name) mkdir(name, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH)
+FILE *fp;
+
+// ダンプ用ファイルのopen/closeが重複呼び出しを防ぐため
+bool isOpenDumpFile = false; 
+
+// ダンプのディレクトリとファイル名の定義
+#define DUMP_DIR_NAME  			("DUMP")
+#define DUMP_FILE_NAME 			("audio")
+#define DUMP_FILE_NAME_SIZE 	(50)
+
+// プロトタイプ宣言
+bool open_file(char *, FILE **);
+bool close_file(FILE **);
+bool write_file(uint8_t *, uint32_t, uint32_t, FILE **);
+bool check_exist_file(char *);
+
+bool isSnedStreamData = false;
+
 struct coreaudio_data {
 	char *device_name;
 	char *device_uid;
@@ -56,6 +78,99 @@ struct coreaudio_data {
 	obs_source_t *source;
 };
 
+bool open_file(char *base_name, FILE **fp)
+{
+    char file_name[DUMP_FILE_NAME_SIZE];
+
+    for (int i = 0; i < 1000; i++)
+    {
+        sprintf(file_name, "%s_%03d.bin", base_name, i);
+        if (!check_exist_file(file_name))
+        {
+            *fp = fopen(file_name, "ab");
+            if (*fp != NULL)
+            {
+                // success create file
+                return true;
+            }
+            else
+            {
+                // fail create file
+                printf("create file: fail(%s)\n", file_name);
+                return false;
+            }
+        }
+    }
+    //  exist base_name file over 1000 
+    return false;
+}
+
+bool close_file(FILE **fp)
+{
+    int ret = fclose(*fp);
+
+    if (ret != 0)
+    {
+        printf("close file: fail\n");
+        return false;
+    }
+
+    return true;
+}
+
+bool write_file(uint8_t* data, uint32_t unit, uint32_t size, FILE **fp)
+{
+    size_t written = fwrite(data,unit, size, *fp);
+
+    if (written != size)
+    {
+        printf("write file: fail\n");
+        return false;
+    }
+
+    return true;
+}
+
+bool check_exist_file(char *file_name)
+{
+    FILE *fp;
+    fp = fopen(file_name, "r");
+    if (fp != NULL)
+    {
+        // exist 
+        return true;
+    }
+    else
+    {
+        // no exist
+        return false;
+    }
+    fclose(fp);
+}
+
+// Audioデータに0以外の値が入っているかチェック
+static bool check_stream_data(struct obs_source_audio *audio, uint32_t size)
+{
+	uint32_t *data = (uint32_t *)audio->data[0];
+	uint32_t count = 0;
+	
+	for (uint32_t i = 0; i < size/4; i++)
+	{
+		uint32_t val = *data;
+		data++;
+
+		// check value
+		if (val != 0)
+		{
+			uint32_t blank_size  = count * 32 / 8;
+			printf("[Detect Stream Data] blank:%dbyte\n", blank_size);
+			return true;
+		}
+		count++;
+	}
+	return false;
+}
+
 static bool get_default_output_device(struct coreaudio_data *ca)
 {
 	struct device_list list;
@@ -336,7 +451,7 @@ static OSStatus input_callback(void *data,
 	struct coreaudio_data *ca = data;
 	OSStatus stat;
 	struct obs_source_audio audio;
-
+	
 	stat = AudioUnitRender(ca->unit, action_flags, ts_data, bus_num, frames,
 			       ca->buf_list);
 	if (!ca_success(stat, ca, "input_callback", "audio retrieval"))
@@ -344,6 +459,16 @@ static OSStatus input_callback(void *data,
 
 	for (UInt32 i = 0; i < ca->buf_list->mNumberBuffers; i++)
 		audio.data[i] = ca->buf_list->mBuffers[i].mData;
+	
+	uint32_t size = ca->buf_list->mBuffers->mDataByteSize;
+	if (!isSnedStreamData)
+	{
+		isSnedStreamData = check_stream_data(&audio, size);
+	}
+	if (isSnedStreamData)
+	{
+		write_file(audio.data[0], sizeof(uint8_t), size, &fp);
+	}
 
 	audio.frames = frames;
 	audio.speakers = ca->speakers;
@@ -547,6 +672,25 @@ static bool coreaudio_start(struct coreaudio_data *ca)
 {
 	OSStatus stat;
 
+    MKDIR(DUMP_DIR_NAME);
+    char base_name[DUMP_FILE_NAME_SIZE]; 
+    sprintf(base_name, "%s/%s", DUMP_DIR_NAME, DUMP_FILE_NAME);
+
+	if (!isOpenDumpFile)
+	{
+    	bool ret = open_file(base_name, &fp);
+    	if (!ret)
+    	{
+			// open fail
+    	    printf("open file: fail\n");
+    	}
+		else
+		{
+			// open success
+			isOpenDumpFile = true;
+		}
+	}
+	
 	if (ca->active)
 		return true;
 
@@ -558,11 +702,27 @@ static void coreaudio_stop(struct coreaudio_data *ca)
 {
 	OSStatus stat;
 
+	if (isOpenDumpFile)
+	{
+    	bool ret = close_file(&fp);
+    	if (!ret)
+    	{
+			// close fail
+    	    printf("close file: fail\n");
+    	}
+		else
+		{
+			// close success
+			isOpenDumpFile = false;
+		}
+	}
+
 	if (!ca->active)
 		return;
 
 	ca->active = false;
 
+
 	stat = AudioOutputUnitStop(ca->unit);
 	ca_success(stat, ca, "coreaudio_stop", "stop audio");
 }
